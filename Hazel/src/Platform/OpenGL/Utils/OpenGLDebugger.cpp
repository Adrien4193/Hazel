#include "OpenGLDebugger.h"

#include "glad/glad.h"

namespace Hazel
{
    static const std::unordered_map<GLenum, std::string> sources = {
        {GL_DEBUG_SOURCE_API, "Calls to the OpenGL API"},
        {GL_DEBUG_SOURCE_WINDOW_SYSTEM, "Calls to a window - system API"},
        {GL_DEBUG_SOURCE_SHADER_COMPILER, "A compiler for a shading language"},
        {GL_DEBUG_SOURCE_THIRD_PARTY, "An application associated with OpenGL"},
        {GL_DEBUG_SOURCE_APPLICATION, "Generated by the user of this application"},
        {GL_DEBUG_SOURCE_OTHER, "Other source"}
    };

    static const std::unordered_map<GLenum, std::string> types = {
        {GL_DEBUG_TYPE_ERROR, "An error, typically from the API"},
        {GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR, "Some behavior marked deprecated has been used"},
        {GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, "Something has invoked undefined behavior"},
        {GL_DEBUG_TYPE_PORTABILITY, "Some functionality the user relies upon is not portable"},
        {GL_DEBUG_TYPE_PERFORMANCE, "Code has triggered possible performance issues"},
        {GL_DEBUG_TYPE_MARKER, "Command stream annotation"},
        {GL_DEBUG_TYPE_PUSH_GROUP, "Group pushing"},
        {GL_DEBUG_TYPE_POP_GROUP, "foo"},
        {GL_DEBUG_TYPE_OTHER, "Other source"}
    };

    static const std::unordered_map<GLenum, std::string> severities = {
        {GL_DEBUG_SEVERITY_HIGH, "HIGH"},
        {GL_DEBUG_SEVERITY_MEDIUM, "MEDIUM"},
        {GL_DEBUG_SEVERITY_LOW, "LOW"},
        {GL_DEBUG_SEVERITY_NOTIFICATION, "NOTIFICATION"}
    };

    static const std::string &Get(const std::unordered_map<GLenum, std::string> &dictionary, GLenum key)
    {
        static const std::string empty;
        auto i = dictionary.find(key);
        return i == dictionary.end() ? empty : i->second;
    }

    static void GLAPIENTRY OnError(
        GLenum source,
        GLenum type,
        GLuint id,
        GLenum severity,
        GLsizei length,
        const GLchar *message,
        const void *userParam)
    {
        CoreError("OpenGL error (id = {}):\n\tsource: {}\n\ttype: {}\n\tsevertity: {}\n\tmessage {}.",
            id,
            Get(sources, source),
            Get(types, type),
            Get(severities, severity),
            message);
    }

    OpenGLDebugger::OpenGLDebugger()
    {
        Init();
    }

    void OpenGLDebugger::Init()
    {
        glEnable(GL_DEBUG_OUTPUT);
        glDebugMessageControl(
            GL_DONT_CARE,
            GL_DONT_CARE,
            GL_DEBUG_SEVERITY_NOTIFICATION,
            0,
            nullptr,
            GL_FALSE);
        glDebugMessageCallback(OnError, this);
    }
}