#pragma once

#include "glad/glad.h"

#include "Hazel/Core/Logging/Log.h"

namespace Hazel
{
	class OpenGLDebugger
	{
	private:
		static const char *GetSource(GLenum source)
		{
			switch (source)
			{
			case GL_DEBUG_SOURCE_API:
				return "Calls to the OpenGL API";
			case GL_DEBUG_SOURCE_WINDOW_SYSTEM:
				return "Calls to a window - system API";
			case GL_DEBUG_SOURCE_SHADER_COMPILER:
				return "A compiler for a shading language";
			case GL_DEBUG_SOURCE_THIRD_PARTY:
				return "An application associated with OpenGL";
			case GL_DEBUG_SOURCE_APPLICATION:
				return "Generated by the user of this application";
			case GL_DEBUG_SOURCE_OTHER:
				return "Other source";
			}
			return "Unknown source";
		}

		static const char *GetType(GLenum type)
		{
			switch (type)
			{
			case GL_DEBUG_TYPE_ERROR:
				return "An error: return typically from the API";
			case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:
				return "Some behavior marked deprecated has been used";
			case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:
				return "Something has invoked undefined behavior";
			case GL_DEBUG_TYPE_PORTABILITY:
				return "Some functionality the user relies upon is not portable";
			case GL_DEBUG_TYPE_PERFORMANCE:
				return "Code has triggered possible performance issues";
			case GL_DEBUG_TYPE_MARKER:
				return "Command stream annotation";
			case GL_DEBUG_TYPE_PUSH_GROUP:
				return "Group pushing";
			case GL_DEBUG_TYPE_POP_GROUP:
				return "foo";
			case GL_DEBUG_TYPE_OTHER:
				return "Other source";
			}
			return "Unknown type";
		};

		static const char *GetSeverity(GLenum severity)
		{
			switch (severity)
			{
			case GL_DEBUG_SEVERITY_HIGH:
				return "HIGH";
			case GL_DEBUG_SEVERITY_MEDIUM:
				return "MEDIUM";
			case GL_DEBUG_SEVERITY_LOW:
				return "LOW";
			case GL_DEBUG_SEVERITY_NOTIFICATION:
				return "NOTIFICATION";
			}
			return "UNKNOWN";
		}

		static void GLAPIENTRY OnError(
			GLenum source,
			GLenum type,
			GLuint id,
			GLenum severity,
			GLsizei length,
			const GLchar *message,
			const void *userParam)
		{
			Log::Error("OpenGL error {}:\n\tsource: {}\n\ttype: {}\n\tsevertity: {}\n\tmessage: {}.",
				id,
				GetSource(source),
				GetType(type),
				GetSeverity(severity),
				message);
		}

	public:
		OpenGLDebugger::OpenGLDebugger()
		{
			glEnable(GL_DEBUG_OUTPUT);
			glDebugMessageControl(
				GL_DONT_CARE,
				GL_DONT_CARE,
				GL_DEBUG_SEVERITY_NOTIFICATION,
				0,
				nullptr,
				GL_FALSE);
			glDebugMessageCallback(&OnError, this);
		}
	};
}